<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- MyBatis에서 namespace는 필수적으로 명시해야 함 -->
<mapper namespace="review">
	<resultMap type="reviewVO" id="reviewRM">
		<result property="timePosted" column="time_posted" />
		<result property="memberVO.nickName" column="nickname" />
		<result property="memberVO.id" column="id" />
		<result property="boardNo" column="board_no" />
	</resultMap> 
	
<select id="reviewList" resultType="reviewVO" parameterType="pagingBean"> 
select board_no as boardNo,nickname as "memberVO.nickName",
time_posted as timePosted,title,hits,likes from
(select row_number() over(order by board.board_no) as rnum,board.board_no,member.nickname,
to_char(board.time_posted,'YYYY.MM.DD') as time_posted,review.title,review.hits,review.likes 
from board board,review review,member member 
where board.board_no=review.board_no and board.id=member.id) 
where rnum between #{startRowNumber} and #{endRowNumber} 
</select>

	<select id="reviewTitleSearchList" resultType="reviewVO" parameterType="pagingBean">
select board_no as boardNo,nickname as "memberVO.nickName",
time_posted as timePosted,title,hits,likes from
(select row_number() over(order by board.board_no) as rnum,board.board_no,member.nickname,
to_char(board.time_posted,'YYYY.MM.DD') as time_posted,review.title,review.hits,review.likes 
from board board,review review,member member 
where board.board_no=review.board_no and board.id=member.id and review.title=#{keyword}) 
where rnum between #{pb.startRowNumber} and #{pb.endRowNumber} 
	</select>

	<select id="reviewWriterSearchList" resultType="reviewVO" parameterType="pagingBean">
select board_no as boardNo,nickname as "memberVO.nickName",
time_posted as timePosted,title,hits,likes from
(select row_number() over(order by board.board_no) as rnum,board.board_no,member.nickname,
to_char(board.time_posted,'YYYY.MM.DD') as time_posted,review.title,review.hits,review.likes 
from board board,review review,member member 
where board.board_no=review.board_no and board.id=member.id and member.nickname=#{keyword}) 
where rnum between  #{pb.startRowNumber} and #{pb.endRowNumber} 
	</select>
	
	<insert id="reviewBoardWrite" parameterType="reviewVO">
		<selectKey keyProperty="boardNo" resultType="int" order="BEFORE">
			select board_seq.nextval from dual
		</selectKey>
		insert into board(board_no,id,content,time_posted)
		values(#{boardNo},#{memberVO.id},#{content},sysdate)
	</insert>

	<insert id="reviewWrite" parameterType="reviewVO">
		insert into review(board_no,title) values(#{boardNo},#{title})    
	</insert>
	
	<select id="getTotalContentCount" resultType="int">  
		select count(*) from review 
	</select>
	
	<select id="getTitleSearchContentCount" resultType="int" parameterType="string">
		select count(*) from board board,review review
		where board.board_no=review.board_no and review.title=#{value}
	</select>
	
		<select id="getWriterSearchCount" resultType="int" parameterType="string">
		select count(*) from board board,review review,member member 
		where board.board_no=review.board_no and member.nickname=#{value} and board.id=member.id
	</select>
	
<select id="reviewDetail"  resultType ="reviewVO" resultMap="reviewRM"  parameterType="int" > 
	select
	r.board_no,b.id,m.nickname,to_char(b.time_posted,'YYYY.MM.DD HH:mm:ss') as time_posted,
	r.hits,r.likes,b.content,r.title
	from board b,review r,member m
	where b.id=m.id and b.board_no=r.board_no  and r.board_no=#{value}
</select>

<update id="reviewUpdate" parameterType="reviewVO">
	update review
	set title=#{title}
	where board_no=#{boardNo}
</update>

	<update id="updateHitBoard" parameterType="int">
	update review set hits=hits+1 where board_no=#{value}
	</update>


</mapper> 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
















